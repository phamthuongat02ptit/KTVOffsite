{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\react\\\\SunhouseKTV\\\\App.js\";\n\nimport 'react-native-gesture-handler';\nimport React, { useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AppLoading from \"expo-app-loading\";\nimport { useFonts } from '@use-expo/font';\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { Provider } from \"react-redux\";\nimport FlashMessage from \"react-native-flash-message\";\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\nimport Screens from \"./navigation/Screens\";\nimport { Images, articles, argonTheme } from \"./constants\";\nimport configureStore from \"./Redux/Store/configureStore\";\nvar store = configureStore();\nvar assetImages = [Images.Onboarding, Images.LogoOnboarding, Images.Logo, Images.Pro, Images.ArgonLogo, Images.iOSLogo, Images.androidLogo];\narticles.map(function (article) {\n  return assetImages.push(article.image);\n});\n\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nexport default (function (props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useFonts = useFonts({\n    'ArgonExtra': require(\"./assets/font/argon.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  function _loadResourcesAsync() {\n    return Promise.all(_toConsumableArray(cacheImages(assetImages)));\n  }\n\n  function _handleLoadingError(error) {\n    console.warn(error);\n  }\n\n  ;\n\n  function _handleFinishLoading() {\n    setLoading(true);\n  }\n\n  ;\n\n  if (!fontsLoaded && !isLoadingComplete) {\n    return React.createElement(AppLoading, {\n      startAsync: _loadResourcesAsync,\n      onError: _handleLoadingError,\n      onFinish: _handleFinishLoading,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    });\n  } else if (fontsLoaded) {\n    return React.createElement(NavigationContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, React.createElement(GalioProvider, {\n      theme: argonTheme,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, React.createElement(Block, {\n      flex: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, React.createElement(Provider, {\n      store: store,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 12\n      }\n    }, React.createElement(Screens, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }\n    })))), React.createElement(FlashMessage, {\n      floating: true,\n      position: \"bottom\",\n      duration: 5000,\n      textStyle: {\n        fontSize: 18\n      },\n      titleStyle: {\n        fontSize: 18\n      },\n      style: {\n        height: 50,\n        padding: 15\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return null;\n  }\n});","map":{"version":3,"sources":["D:/react/SunhouseKTV/App.js"],"names":["React","useState","AppLoading","useFonts","Asset","Block","GalioProvider","NavigationContainer","Provider","FlashMessage","enableScreens","Screens","Images","articles","argonTheme","configureStore","store","assetImages","Onboarding","LogoOnboarding","Logo","Pro","ArgonLogo","iOSLogo","androidLogo","map","article","push","image","cacheImages","images","Image","prefetch","fromModule","downloadAsync","props","isLoadingComplete","setLoading","require","fontsLoaded","_loadResourcesAsync","Promise","all","_handleLoadingError","error","console","warn","_handleFinishLoading","fontSize","height","padding"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\r\nimport React, {useState} from \"react\";\r\nimport { Image } from \"react-native\";\r\nimport AppLoading from \"expo-app-loading\";\r\nimport { useFonts } from '@use-expo/font';\r\nimport { Asset } from \"expo-asset\";\r\nimport { Block, GalioProvider } from \"galio-framework\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { Provider } from \"react-redux\";\r\nimport FlashMessage from \"react-native-flash-message\";\r\n// Before rendering any navigation stack\r\nimport { enableScreens } from \"react-native-screens\";\r\nenableScreens();\r\n\r\nimport Screens from \"./navigation/Screens\";\r\nimport { Images, articles, argonTheme } from \"./constants\";\r\n\r\n\r\nimport configureStore from \"./Redux/Store/configureStore\";\r\nconst store = configureStore();\r\n\r\n// cache app images\r\nconst assetImages = [\r\n  Images.Onboarding,\r\n  Images.LogoOnboarding,\r\n  Images.Logo,\r\n  Images.Pro,\r\n  Images.ArgonLogo,\r\n  Images.iOSLogo,\r\n  Images.androidLogo\r\n];\r\n\r\n// cache product images\r\narticles.map(article => assetImages.push(article.image));\r\n\r\nfunction cacheImages(images) {\r\n  return images.map(image => {\r\n    if (typeof image === \"string\") {\r\n      return Image.prefetch(image);\r\n    } else {\r\n      return Asset.fromModule(image).downloadAsync();\r\n    }\r\n  });\r\n}\r\n\r\nexport default props => {\r\n  const [isLoadingComplete, setLoading] = useState(false);\r\n  let [fontsLoaded] = useFonts({\r\n    'ArgonExtra': require('./assets/font/argon.ttf'),\r\n  });\r\n\r\n  function _loadResourcesAsync() {\r\n    return Promise.all([...cacheImages(assetImages)]);\r\n  }\r\n\r\n  function _handleLoadingError(error) {\r\n    // In this case, you might want to report the error to your error\r\n    // reporting service, for example Sentry\r\n    console.warn(error);\r\n  };\r\n\r\n function _handleFinishLoading() {\r\n    setLoading(true);\r\n  };\r\n\r\n  if(!fontsLoaded && !isLoadingComplete) {\r\n    return (\r\n      <AppLoading\r\n        startAsync={_loadResourcesAsync}\r\n        onError={_handleLoadingError}\r\n        onFinish={_handleFinishLoading}\r\n      />\r\n    );\r\n  } else if(fontsLoaded) {\r\n    return (\r\n      <NavigationContainer>\r\n        <GalioProvider theme={argonTheme}>\r\n          <Block flex>\r\n           <Provider store ={store}>\r\n           <Screens />\r\n           </Provider>\r\n          </Block>\r\n        </GalioProvider>\r\n        <FlashMessage\r\n          floating={true}\r\n          position=\"bottom\"\r\n          duration={5000}\r\n          textStyle={{fontSize:18}}\r\n          titleStyle={{fontSize:18}}\r\n          style={{height:50,padding:15}}\r\n        ></FlashMessage>\r\n      </NavigationContainer>\r\n    );\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}