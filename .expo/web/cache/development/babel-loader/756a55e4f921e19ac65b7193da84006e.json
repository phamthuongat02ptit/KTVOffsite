{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\react\\\\SunhouseKTV\\\\components\\\\Icon.js\";\nvar _excluded = [\"name\", \"family\", \"color\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as Font from 'expo-font';\nimport { createIconSetFromIcoMoon, MaterialCommunityIcons, MaterialIcons, Ionicons, AntDesign, FontAwesome } from '@expo/vector-icons';\nimport { Icon } from 'galio-framework';\nimport argonConfig from \"../assets/config/argon.json\";\n\nvar ArgonExtra = require(\"../assets/font/argon.ttf\");\n\nvar IconArgonExtra = createIconSetFromIcoMoon(argonConfig, 'ArgonExtra');\n\nvar IconExtra = function (_React$Component) {\n  _inherits(IconExtra, _React$Component);\n\n  var _super = _createSuper(IconExtra);\n\n  function IconExtra() {\n    var _this;\n\n    _classCallCheck(this, IconExtra);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fontLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(IconExtra, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                ArgonExtra: ArgonExtra\n              }));\n\n            case 2:\n              this.setState({\n                fontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          name = _this$props.name,\n          family = _this$props.family,\n          color = _this$props.color,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      if (name && family && this.state.fontLoaded) {\n        if (family === 'ArgonExtra') {\n          return React.createElement(IconArgonExtra, _extends({\n            name: name,\n            family: family\n          }, rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 16\n            }\n          }));\n        }\n\n        if (family === 'MaterialIcons') {\n          return React.createElement(MaterialCommunityIcons, _extends({\n            color: color,\n            name: name\n          }, rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 16\n            }\n          }));\n        }\n\n        if (family === 'AntDesign') {\n          return React.createElement(AntDesign, _extends({\n            color: color,\n            name: name\n          }, rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 16\n            }\n          }));\n        }\n\n        if (family === 'Ionicons ') {\n          return React.createElement(Ionicons, _extends({\n            color: color,\n            name: name\n          }, rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 16\n            }\n          }));\n        }\n\n        if (family === 'MaterialIcons1') {\n          return React.createElement(MaterialIcons, _extends({\n            name: name,\n            color: color\n          }, rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 16\n            }\n          }));\n        }\n\n        if (family === 'FontAwesome') {\n          return React.createElement(FontAwesome, _extends({\n            name: name,\n            color: color\n          }, rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 16\n            }\n          }));\n        }\n\n        return React.createElement(Icon, _extends({\n          name: name,\n          family: family\n        }, rest, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 14\n          }\n        }));\n      }\n\n      return null;\n    }\n  }]);\n\n  return IconExtra;\n}(React.Component);\n\nexport default IconExtra;","map":{"version":3,"sources":["D:/react/SunhouseKTV/components/Icon.js"],"names":["React","Font","createIconSetFromIcoMoon","MaterialCommunityIcons","MaterialIcons","Ionicons","AntDesign","FontAwesome","Icon","argonConfig","ArgonExtra","require","IconArgonExtra","IconExtra","state","fontLoaded","loadAsync","setState","props","name","family","color","rest","Component"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,wBAAT,EAAmCC,sBAAnC,EAA0DC,aAA1D,EAAyEC,QAAzE,EAAmFC,SAAnF,EAA6FC,WAA7F,QAAgH,oBAAhH;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,OAAOC,WAAP;;AACA,IAAMC,UAAU,GAAGC,OAAO,4BAA1B;;AACA,IAAMC,cAAc,GAAGV,wBAAwB,CAACO,WAAD,EAAc,YAAd,CAA/C;;IAEMI,S;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE;AADN,K;;;;;;WAIR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQd,IAAI,CAACe,SAAL,CAAe;AAAEN,gBAAAA,UAAU,EAAEA;AAAd,eAAf,CADR;;AAAA;AAEE,mBAAKO,QAAL,CAAc;AAAEF,gBAAAA,UAAU,EAAE;AAAd,eAAd;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAKA,kBAAS;AACP,wBAAwC,KAAKG,KAA7C;AAAA,UAAQC,IAAR,eAAQA,IAAR;AAAA,UAAcC,MAAd,eAAcA,MAAd;AAAA,UAAqBC,KAArB,eAAqBA,KAArB;AAAA,UAA+BC,IAA/B;;AAEA,UAAIH,IAAI,IAAIC,MAAR,IAAkB,KAAKN,KAAL,CAAWC,UAAjC,EAA6C;AAC3C,YAAIK,MAAM,KAAK,YAAf,EAA6B;AAC3B,iBAAO,oBAAC,cAAD;AAAgB,YAAA,IAAI,EAAED,IAAtB;AAA4B,YAAA,MAAM,EAAEC;AAApC,aAAgDE,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,YAAIF,MAAM,KAAK,eAAf,EAAgC;AAC9B,iBAAO,oBAAC,sBAAD;AAAwB,YAAA,KAAK,EAAEC,KAA/B;AAAsC,YAAA,IAAI,EAAEF;AAA5C,aAAsDG,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,YAAIF,MAAM,KAAK,WAAf,EAA4B;AAC1B,iBAAO,oBAAC,SAAD;AAAW,YAAA,KAAK,EAAEC,KAAlB;AAAyB,YAAA,IAAI,EAAEF;AAA/B,aAAyCG,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,YAAIF,MAAM,KAAK,WAAf,EAA4B;AAC1B,iBAAO,oBAAC,QAAD;AAAU,YAAA,KAAK,EAAEC,KAAjB;AAAwB,YAAA,IAAI,EAAEF;AAA9B,aAAwCG,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,YAAIF,MAAM,KAAK,gBAAf,EAAiC;AAC/B,iBAAO,oBAAC,aAAD;AAAe,YAAA,IAAI,EAAED,IAArB;AAA2B,YAAA,KAAK,EAAEE;AAAlC,aAA6CC,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,YAAIF,MAAM,KAAK,aAAf,EAA8B;AAC5B,iBAAO,oBAAC,WAAD;AAAa,YAAA,IAAI,EAAED,IAAnB;AAAyB,YAAA,KAAK,EAAEE;AAAhC,aAA2CC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,eAAO,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAEH,IAAZ;AAAkB,UAAA,MAAM,EAAEC;AAA1B,WAAsCE,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;;AAED,aAAO,IAAP;AACD;;;;EApCqBtB,KAAK,CAACuB,S;;AAuC9B,eAAeV,SAAf","sourcesContent":["import React from 'react';\r\nimport * as Font from 'expo-font';\r\nimport { createIconSetFromIcoMoon, MaterialCommunityIcons,MaterialIcons, Ionicons, AntDesign,FontAwesome } from '@expo/vector-icons';\r\nimport { Icon } from 'galio-framework';\r\n\r\nimport argonConfig from '../assets/config/argon.json';\r\nconst ArgonExtra = require('../assets/font/argon.ttf');\r\nconst IconArgonExtra = createIconSetFromIcoMoon(argonConfig, 'ArgonExtra');\r\n\r\nclass IconExtra extends React.Component {\r\n  state = {\r\n    fontLoaded: false,\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await Font.loadAsync({ ArgonExtra: ArgonExtra });\r\n    this.setState({ fontLoaded: true });\r\n  }\r\n\r\n  render() {\r\n    const { name, family,color, ...rest } = this.props;\r\n\r\n    if (name && family && this.state.fontLoaded) {\r\n      if (family === 'ArgonExtra') {\r\n        return <IconArgonExtra name={name} family={family} {...rest} />;\r\n      }\r\n      if (family === 'MaterialIcons') {\r\n        return <MaterialCommunityIcons color={color} name={name} {...rest} />;\r\n      }\r\n      if (family === 'AntDesign') {\r\n        return <AntDesign color={color} name={name} {...rest} />;\r\n      }\r\n      if (family === 'Ionicons ') {\r\n        return <Ionicons color={color} name={name} {...rest} />;\r\n      }\r\n      if (family === 'MaterialIcons1') {\r\n        return <MaterialIcons name={name} color={color} {...rest} />;\r\n      }\r\n      if (family === 'FontAwesome') {\r\n        return <FontAwesome name={name} color={color} {...rest} />;\r\n      }\r\n      return <Icon name={name} family={family} {...rest} />;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default IconExtra;\r\n"]},"metadata":{},"sourceType":"module"}