{"version":3,"sources":["Item.tsx"],"names":["React","View","Text","StyleSheet","Avatar","useTheme","MaterialCommunityIcons","Lo","colors","ConstColors","ITEMLAYOUT","PressableTouch","defaultProps","selectedColor","primary","itemTextStyle","itemContainerStyle","rippleColor","enableAvatar","disabled","styles","create","selected","paddingLeft","listView","flex","paddingVertical","height","flexDirection","justifyContent","alignItems","iconView","width","textView","avatarView","backgroundColor","disabledText","color","disabledItemView","defaultAvatar","require","Item","item","onSelect","avatarSize","disableSelectionTick","selectedItemTextStyle","selectedItemViewStyle","disabledItemViewStyle","disabledItemTextStyle","itemSelectIcon","itemSelectIconSize","label","value","avatarSource","avatarComponent","handleSelectValue","getSelectedStyles","isEmpty","renderIcon","inlineStyle","unselected","text","Math","random","toString"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,UAArB,QAAuC,cAAvC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,OAAOC,sBAAP,MAAmC,kDAAnC;AACA,OAAOC,EAAP,MAAe,QAAf;AACA,SAASC,MAAM,IAAIC,WAAnB,EAAgCC,UAAhC,QAAkD,cAAlD;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAEJ,WAAW,CAACK,OADR;AAEnBC,EAAAA,aAAa,EAAE,EAFI;AAGnBC,EAAAA,kBAAkB,EAAE,EAHD;AAInBC,EAAAA,WAAW,EAAE,iBAJM;AAKnBC,EAAAA,YAAY,EAAE,KALK;AAMnBC,EAAAA,QAAQ,EAAE;AANS,CAArB;AASA,MAAMC,MAAM,GAAGjB,UAAU,CAACkB,MAAX,CAAkB;AAC/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE;AADL,GADqB;AAI/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,CADE;AAERC,IAAAA,eAAe,EAAE,EAFT;AAGRC,IAAAA,MAAM,EAAEjB,UAHA;AAIRkB,IAAAA,aAAa,EAAE,KAJP;AAKRC,IAAAA,cAAc,EAAE,eALR;AAMRC,IAAAA,UAAU,EAAE;AANJ,GAJqB;AAY/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE;AADC,GAZqB;AAe/BC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,UAAU,EAAE,QADJ;AAERF,IAAAA,aAAa,EAAE;AAFP,GAfqB;AAmB/BM,EAAAA,UAAU,EAAE;AACVC,IAAAA,eAAe,EAAE;AADP,GAnBmB;AAsB/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAtBiB;AAyB/BC,EAAAA,gBAAgB,EAAE;AAChBH,IAAAA,eAAe,EAAE;AADD;AAzBa,CAAlB,CAAf;;AA8BA,MAAMI,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAA7B;;AAEA,MAAMC,IAAkC,GAAG,CAAC;AAC1CC,EAAAA,IAD0C;AAE1CpB,EAAAA,QAF0C;AAG1CqB,EAAAA,QAH0C;AAI1C9B,EAAAA,aAJ0C;AAK1CE,EAAAA,aAL0C;AAM1CC,EAAAA,kBAN0C;AAO1CC,EAAAA,WAP0C;AAQ1CE,EAAAA,QAAQ,GAAG,IAR+B;AAS1CD,EAAAA,YAT0C;AAU1C0B,EAAAA,UAV0C;AAW1CC,EAAAA,oBAX0C;AAY1CC,EAAAA,qBAZ0C;AAa1CC,EAAAA,qBAb0C;AAc1CC,EAAAA,qBAAqB,GAAG5B,MAAM,CAACkB,gBAdW;AAe1CW,EAAAA,qBAAqB,GAAG7B,MAAM,CAACgB,YAfW;AAgB1Cc,EAAAA,cAAc,GAAG,OAhByB;AAiB1CC,EAAAA,kBAAkB,GAAG;AAjBqB,CAAD,KAkBrC;AACJ,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,YAAhB;AAA8BC,IAAAA;AAA9B,MAAkDb,IAAxD;AACA,QAAM;AAAElC,IAAAA;AAAF,MAAaH,QAAQ,EAA3B;;AACA,QAAMmD,iBAAiB,GAAG,MAAM;AAC9Bb,IAAAA,QAAQ,CAACU,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMI,iBAAiB,GAAG,MAAM;AAC9B,QAAI,CAAClD,EAAE,CAACmD,OAAH,CAAWZ,qBAAX,CAAL,EAAwC;AACtC,aAAO,EACL,GAAG1B,MAAM,CAACE,QADL;AAELe,QAAAA,KAAK,EAAExB,aAFF;AAGL,WAAIiC;AAHC,OAAP;AAKD,KAND,MAMO,OAAO1B,MAAM,CAACE,QAAd;AACR,GARD;;AAUA,QAAMqC,UAAU,GAAG,MAAM;AACvB,QAAI,OAAOT,cAAP,KAA0B,QAA9B,EAAwC;AACtC,0BACE,oBAAC,sBAAD;AACE,QAAA,IAAI,EAAEA,cADR;AAEE,QAAA,IAAI,EAAEC,kBAFR;AAGE,QAAA,KAAK,EAAEtC;AAHT,QADF;AAOD;;AACD,WAAOqC,cAAP;AACD,GAXD;;AAaA,QAAMU,WAAW,GAAGzD,UAAU,CAACkB,MAAX,CAAkB;AACpCwC,IAAAA,UAAU,EAAE;AACVxB,MAAAA,KAAK,EAAE7B,MAAM,CAACsD,IADJ;AAEVvC,MAAAA,WAAW,EAAE;AAFH;AADwB,GAAlB,CAApB;AAOA,sBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAEiC,iBADX;AAEE,IAAA,QAAQ,EAAErC,QAFZ;AAGE,IAAA,GAAG,EAAE4C,IAAI,CAACC,MAAL,GAAcC,QAAd,EAHP;AAIE,IAAA,WAAW,EAAEhD;AAJf,kBAME,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLG,MAAM,CAACI,QADF,EAELR,kBAFK,EAGLM,QAAQ,KAAK+B,KAAb,IAAsBN,qBAHjB,EAIL5B,QAAQ,IAAI6B,qBAJP;AADT,kBAQE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE5B,MAAM,CAACa;AAApB,KACGf,YAAY,GACXqC,eAAe,GACbA,eADa,gBAGb,oBAAC,MAAD,CAAQ,KAAR;AACE,IAAA,IAAI,EAAEX,UADR;AAEE,IAAA,KAAK,EAAExB,MAAM,CAACc,UAFhB;AAGE,IAAA,MAAM,EAAEoB,YAAY,IAAIf;AAH1B,IAJS,GAUT,IAXN,eAYE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLxB,aADK,EAELO,QAAQ,KAAK+B,KAAb,GAAqBI,iBAAiB,EAAtC,GAA2CG,WAAW,CAACC,UAFlD,EAGL1C,QAAQ,IAAI8B,qBAHP;AADT,KAOGG,KAPH,CAZF,CARF,eA8BE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhC,MAAM,CAACW;AAApB,KACG,CAACc,oBAAD,IAAyBvB,QAAQ,KAAK+B,KAAtC,IAA+CM,UAAU,EAD5D,CA9BF,CANF,CADF;AA2CD,CAlGD;;AAoGAlB,IAAI,CAAC7B,YAAL,GAAoBA,YAApB;AAEA,eAAe6B,IAAf","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Avatar, useTheme } from 'react-native-paper';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport Lo from 'lodash';\nimport { colors as ConstColors, ITEMLAYOUT } from '../constants';\nimport type { IDropdownItemProps } from '../types';\nimport PressableTouch from './PressableTouch';\n\nconst defaultProps = {\n  selectedColor: ConstColors.primary,\n  itemTextStyle: {},\n  itemContainerStyle: {},\n  rippleColor: 'rgba(0,0,0,0.1)',\n  enableAvatar: false,\n  disabled: false,\n};\n\nconst styles = StyleSheet.create({\n  selected: {\n    paddingLeft: 5,\n  },\n  listView: {\n    flex: 1,\n    paddingVertical: 10,\n    height: ITEMLAYOUT,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  iconView: {\n    width: 30,\n  },\n  textView: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  avatarView: {\n    backgroundColor: 'transparent',\n  },\n  disabledText: {\n    color: 'grey',\n  },\n  disabledItemView: {\n    backgroundColor: 'transparent',\n  },\n});\n\nconst defaultAvatar = require('../assets/ddicon.png');\n\nconst Item: React.FC<IDropdownItemProps> = ({\n  item,\n  selected,\n  onSelect,\n  selectedColor,\n  itemTextStyle,\n  itemContainerStyle,\n  rippleColor,\n  disabled = true,\n  enableAvatar,\n  avatarSize,\n  disableSelectionTick,\n  selectedItemTextStyle,\n  selectedItemViewStyle,\n  disabledItemViewStyle = styles.disabledItemView,\n  disabledItemTextStyle = styles.disabledText,\n  itemSelectIcon = 'check',\n  itemSelectIconSize = 18,\n}) => {\n  const { label, value, avatarSource, avatarComponent } = item;\n  const { colors } = useTheme();\n  const handleSelectValue = () => {\n    onSelect(value);\n  };\n\n  const getSelectedStyles = () => {\n    if (!Lo.isEmpty(selectedItemTextStyle)) {\n      return {\n        ...styles.selected,\n        color: selectedColor,\n        ...(selectedItemTextStyle as {}),\n      };\n    } else return styles.selected;\n  };\n\n  const renderIcon = () => {\n    if (typeof itemSelectIcon === 'string') {\n      return (\n        <MaterialCommunityIcons\n          name={itemSelectIcon}\n          size={itemSelectIconSize}\n          color={selectedColor}\n        />\n      );\n    }\n    return itemSelectIcon;\n  };\n\n  const inlineStyle = StyleSheet.create({\n    unselected: {\n      color: colors.text,\n      paddingLeft: 5,\n    },\n  });\n\n  return (\n    <PressableTouch\n      onPress={handleSelectValue}\n      disabled={disabled}\n      key={Math.random().toString()}\n      rippleColor={rippleColor}\n    >\n      <View\n        style={[\n          styles.listView,\n          itemContainerStyle,\n          selected === value && selectedItemViewStyle,\n          disabled && disabledItemViewStyle,\n        ]}\n      >\n        <View style={styles.textView}>\n          {enableAvatar ? (\n            avatarComponent ? (\n              avatarComponent\n            ) : (\n              <Avatar.Image\n                size={avatarSize}\n                style={styles.avatarView}\n                source={avatarSource || defaultAvatar}\n              />\n            )\n          ) : null}\n          <Text\n            style={[\n              itemTextStyle,\n              selected === value ? getSelectedStyles() : inlineStyle.unselected,\n              disabled && disabledItemTextStyle,\n            ]}\n          >\n            {label}\n          </Text>\n        </View>\n        <View style={styles.iconView}>\n          {!disableSelectionTick && selected === value && renderIcon()}\n        </View>\n      </View>\n    </PressableTouch>\n  );\n};\n\nItem.defaultProps = defaultProps;\n\nexport default Item;\n"]}