{"version":3,"sources":["index.tsx"],"names":["defaultAvatar","require","MultiselectDropdown","props","error","value","label","required","disabled","data","onChange","floating","enableSearch","primaryColor","ConsColors","primary","elevation","borderRadius","activityIndicatorColor","searchPlaceholder","rippleColor","helperText","errorColor","itemTextStyle","itemContainerStyle","showLoader","animationIn","animationOut","supportedOrientations","animationInTiming","animationOutTiming","parentDDContainerStyle","emptyListText","disableSort","enableAvatar","avatarSize","defaultSortOrder","chipType","chipTextStyle","onBlur","emptySelectionText","paperTheme","textInputStyle","chipStyle","mainContainerStyle","underlineColor","disableSelectionTick","selectedItemTextStyle","selectedItemViewStyle","removeLabel","mode","selectedItemsText","disabledItemTextStyle","disabledItemViewStyle","hideChip","dropdownIcon","dropdownIconSize","itemSelectIcon","itemSelectIconSize","multiline","searchInputTheme","colors","selectedItems","setSelectedItems","labelv","setLabelV","isVisible","setIsVisible","iconColor","setIconColor","options","setOptions","hasError","setError","contMeasure","setConMeasure","vx","vy","vWidth","vHeight","dimension","setDimension","dw","deviceWidth","dh","deviceHeight","searchQuery","setSearchQuery","pViewRef","listRef","Dimensions","addEventListener","width","height","get","removeEventListener","Lo","isEmpty","length","filter","d","includes","current","flashScrollIndicators","orderBy","onTextInputFocus","measureInWindow","ddTop","bottomMetric","androidOnLayout","Platform","OS","onModalBlur","handleOptionSelect","v","remove","s","onChangeSearch","query","lFilter","opt","toString","toLowerCase","trim","sortBy","removeChip","rmV","getEmptyComponent","labelAction","styles","fullWidth","textInput","chipScrollView","Math","random","item","chipWrapper","chip","borderColor","backgroundColor","textView","avatarComponent","avatarView","avatarSource","modalStyle","background","left","top","right","position","padding","multiSelectSurface","maxHeight","loader","divider","ITEMLAYOUT","undefined","_d","index","offset","defaultProps","defaultDropdownProps"],"mappings":";;;;;;;AAAA;;AACA;;AAaA;;AAQA;;AACA;;AAEA;;AACA;;AAMA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAA7B;;AAEA,MAAMC,mBAAwD,GAAGC,KAAK,IAAI;AACxE,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,IANI;AAOJC,IAAAA,QAPI;AAQJC,IAAAA,QARI;AASJC,IAAAA,YATI;AAUJC,IAAAA,YAAY,GAAGC,kBAAWC,OAVtB;AAWJC,IAAAA,SAXI;AAYJC,IAAAA,YAZI;AAaJC,IAAAA,sBAbI;AAcJC,IAAAA,iBAdI;AAeJC,IAAAA,WAfI;AAgBJC,IAAAA,UAhBI;AAiBJC,IAAAA,UAjBI;AAkBJC,IAAAA,aAlBI;AAmBJC,IAAAA,kBAnBI;AAoBJC,IAAAA,UApBI;AAqBJC,IAAAA,WAAW,GAAG,QArBV;AAsBJC,IAAAA,YAAY,GAAG,SAtBX;AAuBJC,IAAAA,qBAAqB,GAAG,CAAC,UAAD,EAAa,WAAb,CAvBpB;AAwBJC,IAAAA,iBAxBI;AAyBJC,IAAAA,kBAzBI;AA0BJC,IAAAA,sBA1BI;AA2BJC,IAAAA,aA3BI;AA4BJC,IAAAA,WA5BI;AA6BJC,IAAAA,YA7BI;AA8BJC,IAAAA,UA9BI;AA+BJC,IAAAA,gBAAgB,GAAG,KA/Bf;AAgCJC,IAAAA,QAAQ,GAAG,MAhCP;AAiCJC,IAAAA,aAAa,GAAG,EAjCZ;AAkCJC,IAAAA,MAlCI;AAmCJC,IAAAA,kBAnCI;AAoCJC,IAAAA,UApCI;AAqCJC,IAAAA,cArCI;AAsCJC,IAAAA,SAAS,GAAG,EAtCR;AAuCJC,IAAAA,kBAvCI;AAwCJC,IAAAA,cAxCI;AAyCJC,IAAAA,oBAzCI;AA0CJC,IAAAA,qBA1CI;AA2CJC,IAAAA,qBA3CI;AA4CJC,IAAAA,WA5CI;AA6CJC,IAAAA,IAAI,GAAG,MA7CH;AA8CJC,IAAAA,iBA9CI;AA+CJC,IAAAA,qBA/CI;AAgDJC,IAAAA,qBAhDI;AAiDJC,IAAAA,QAAQ,GAAG,KAjDP;AAkDJC,IAAAA,YAAY,GAAG,WAlDX;AAmDJC,IAAAA,gBAAgB,GAAG,EAnDf;AAoDJC,IAAAA,cApDI;AAqDJC,IAAAA,kBArDI;AAsDJC,IAAAA,SAAS,GAAG,KAtDR;AAuDJC,IAAAA;AAvDI,MAwDFzD,KAxDJ;AAyDA,QAAM;AAAE0D,IAAAA;AAAF,MAAa,iCAAnB;AAEA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC,qBAA0B,EAA1B,CAA1C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB,qBAAiB,EAAjB,CAA5B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,qBAAkB,KAAlB,CAAlC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,qBAA6B,MAA7B,CAAlC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB,qBAA0B,EAA1B,CAA9B;AACA,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuB,qBAAkB,KAAlB,CAA7B;AACA,QAAM,CAACC,WAAD,EAAcC,aAAd,IAA+B,qBAAS;AAC5CC,IAAAA,EAAE,EAAE,CADwC;AAE5CC,IAAAA,EAAE,EAAE,CAFwC;AAG5CC,IAAAA,MAAM,EAAE,CAHoC;AAI5CC,IAAAA,OAAO,EAAE;AAJmC,GAAT,CAArC;AAMA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,qBAAS;AACzCC,IAAAA,EAAE,EAAEC,iBADqC;AAEzCC,IAAAA,EAAE,EAAEC;AAFqC,GAAT,CAAlC;AAIA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC,qBAAiB,EAAjB,CAAtC;AACA,QAAMC,QAAQ,GAAG,oBAAjB;AACA,QAAMC,OAAO,GAAG,oBAAhB;AAEA,wBAAU,MAAM;AACdC,4BAAWC,gBAAX,CAA4B,QAA5B,EAAsC,MAAM;AAC1CxB,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,YAAM;AAAEyB,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBH,wBAAWI,GAAX,CAAe,QAAf,CAA1B;;AACAb,MAAAA,YAAY,CAAC;AAAEC,QAAAA,EAAE,EAAEU,KAAN;AAAaR,QAAAA,EAAE,EAAES;AAAjB,OAAD,CAAZ;AACAxB,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD,KALD;;AAMA,WAAO,MAAM;AACXqB,8BAAWK,mBAAX,CAA+B,QAA/B,EAAyC,MAAM,CAAE,CAAjD;AACD,KAFD;AAGD,GAVD,EAUG,EAVH;AAYA,wBAAU,MAAM;AACd,QAAI,CAACC,gBAAGC,OAAH,CAAWxF,IAAX,CAAD,IAAqBJ,KAAzB,EAAgC;AAC9B4D,MAAAA,SAAS,WAAI5D,KAAK,CAAC6F,MAAV,cAAoB/C,iBAAiB,IAAI,UAAzC,EAAT;AACAY,MAAAA,gBAAgB,CAACiC,gBAAGG,MAAH,CAAU1F,IAAV,EAAgB2F,CAAC,IAAI/F,KAAK,CAACgG,QAAN,CAAeD,CAAC,CAAC/F,KAAjB,CAArB,CAAD,CAAhB;AACD;AACF,GALD,EAKG,CAACA,KAAD,EAAQI,IAAR,EAAc0C,iBAAd,CALH;AAOA,wBAAU,MAAM;AACd,QAAI9C,KAAJ,EAAW;AACT4D,MAAAA,SAAS,WAAI5D,KAAK,CAAC6F,MAAV,cAAoB/C,iBAAiB,IAAI,UAAzC,EAAT;AACAY,MAAAA,gBAAgB,CAACiC,gBAAGG,MAAH,CAAU1F,IAAV,EAAgB2F,CAAC,IAAI/F,KAAK,CAACgG,QAAN,CAAeD,CAAC,CAAC/F,KAAjB,CAArB,CAAD,CAAhB;AACD;AACF,GALD,EAKG,CAACA,KAAD,EAAQI,IAAR,EAAc0C,iBAAd,CALH;AAOA,wBAAU,MAAM;AACd,QAAI3C,QAAJ,EAAc;AACZ6D,MAAAA,YAAY,CAAC,WAAD,CAAZ;AACD;AACF,GAJD,EAIG,CAAC7D,QAAD,CAJH;AAMA,wBAAU,MAAM;AACd,QAAI0D,SAAS,IAAIuB,OAAjB,EAA0B;AACxBA,MAAAA,OAAO,CAACa,OAAR,CAAgBC,qBAAhB;AACD;AACF,GAJD,EAIG,CAACrC,SAAD,CAJH;AAMA,wBAAU,MAAM;AACd,QAAI,CAACjC,WAAL,EACEsC,UAAU,CAACyB,gBAAGQ,OAAH,CAAW/F,IAAX,EAAiB,CAAC,OAAD,CAAjB,EAA4B,CAAC2B,gBAAD,CAA5B,CAAD,CAAV,CADF,KAEKmC,UAAU,CAAC9D,IAAD,CAAV;AACN,GAJD,EAIG,CAACA,IAAD,EAAOwB,WAAP,EAAoBG,gBAApB,CAJH;AAMA,wBAAU,MAAM;AACd,QAAI7B,QAAQ,IAAIH,KAAhB,EAAuB;AACrBqE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAJ,MAAAA,YAAY,CAAC/C,UAAD,CAAZ;AACD,KAHD,MAGO;AACLmD,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAJ,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD;AACF,GARD,EAQG,CAAC9D,QAAD,EAAWH,KAAX,EAAkBkB,UAAlB,CARH;;AAUA,QAAMmF,gBAAgB,GAAG,MAAM;AAC7B,QAAIjC,QAAJ,EAAc;AACZH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,YAAY,CAACxD,YAAD,CAAZ;AACD;;AACD2E,IAAAA,QAAQ,CAACc,OAAT,CAAiBI,eAAjB,CACE,CAAC9B,EAAD,EAAaC,EAAb,EAAyBC,MAAzB,EAAyCC,OAAzC,KAA6D;AAC3D,YAAM4B,KAAK,GAAG9B,EAAE,GAAGE,OAAnB;AACA,YAAM6B,YAAY,GAAG5B,SAAS,CAACI,EAAV,GAAeP,EAApC;;AACA,UAAI+B,YAAY,GAAG,GAAnB,EAAwB;AACtBjC,QAAAA,aAAa,CAAC;AAAEC,UAAAA,EAAF;AAAMC,UAAAA,EAAE,EAAE8B,KAAK,GAAG,GAAlB;AAAuB7B,UAAAA,MAAvB;AAA+BC,UAAAA;AAA/B,SAAD,CAAb;AACD,OAFD,MAEO;AACLJ,QAAAA,aAAa,CAAC;AACZC,UAAAA,EADY;AAEZC,UAAAA,EAAE,EAAE8B,KAFQ;AAGZ7B,UAAAA,MAHY;AAIZC,UAAAA;AAJY,SAAD,CAAb;AAMD;AACF,KAdH;AAgBAZ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAvBD;;AAyBA,QAAM0C,eAAe,GAAG,MAAM;AAC5B,QAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7BvB,MAAAA,QAAQ,CAACc,OAAT,CAAiBI,eAAjB,CACE,CAAC9B,EAAD,EAAaC,EAAb,EAAyBC,MAAzB,EAAyCC,OAAzC,KAA6D;AAC3D,cAAM4B,KAAK,GAAG9B,EAAE,GAAGE,OAAnB;AACA,cAAM6B,YAAY,GAAG5B,SAAS,CAACI,EAAV,GAAeP,EAApC;;AACA,YAAI+B,YAAY,GAAG,GAAnB,EAAwB;AACtBjC,UAAAA,aAAa,CAAC;AAAEC,YAAAA,EAAF;AAAMC,YAAAA,EAAE,EAAE8B,KAAK,GAAG,GAAlB;AAAuB7B,YAAAA,MAAvB;AAA+BC,YAAAA;AAA/B,WAAD,CAAb;AACD,SAFD,MAEO;AACLJ,UAAAA,aAAa,CAAC;AAAEC,YAAAA,EAAF;AAAMC,YAAAA,EAAE,EAAE8B,KAAV;AAAiB7B,YAAAA,MAAjB;AAAyBC,YAAAA;AAAzB,WAAD,CAAb;AACD;AACF,OATH;AAWD;AACF,GAdD;;AAgBA,QAAMiC,WAAW,GAAG,MAAM;AACxB7C,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,QAAIK,QAAJ,EAAc;AACZH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD;;AAED,QAAI9B,MAAM,IAAI,OAAOA,MAAP,KAAkB,UAAhC,EAA4CA,MAAM;AACnD,GATD;;AAWA,QAAM0E,kBAAkB,GAAIC,CAAD,IAAwB;AACjD,QAAIxG,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9C,UAAIL,KAAK,CAACgG,QAAN,CAAea,CAAf,CAAJ,EAAuB;AACrBxG,QAAAA,QAAQ,CAACsF,gBAAGmB,MAAH,CAAU9G,KAAV,EAAiB+G,CAAC,IAAIA,CAAC,KAAKF,CAA5B,CAAD,CAAR;AACD,OAFD,MAEO;AACLxG,QAAAA,QAAQ,CAAC,CAAC,GAAGL,KAAJ,EAAW6G,CAAX,CAAD,CAAR;AACD;;AACD,UAAI1C,QAAJ,EAAc;AACZH,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,YAAY,CAAC,MAAD,CAAZ;AACD;AACF;;AACDkB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACA,QAAI,CAACtD,WAAL,EACEsC,UAAU,CAACyB,gBAAGQ,OAAH,CAAW/F,IAAX,EAAiB,CAAC,OAAD,CAAjB,EAA4B,CAAC2B,gBAAD,CAA5B,CAAD,CAAV,CADF,KAEKmC,UAAU,CAAC9D,IAAD,CAAV;AACN,GAjBD;;AAmBA,QAAM4G,cAAc,GAAIC,KAAD,IAAmB;AACxC/B,IAAAA,cAAc,CAAC+B,KAAD,CAAd;;AACA,QAAI,CAACtB,gBAAGC,OAAH,CAAWxF,IAAX,CAAD,IAAqB6G,KAAzB,EAAgC;AAC9B,YAAMC,OAAO,GAAG9G,IAAI,CAAC0F,MAAL,CAAYqB,GAAG,IAC7BA,GAAG,CAAClH,KAAJ,CACGmH,QADH,GAEGC,WAFH,GAGGC,IAHH,GAIGtB,QAJH,CAIYiB,KAAK,CAACG,QAAN,GAAiBC,WAAjB,EAJZ,CADc,CAAhB;;AAOA,UAAIH,OAAO,CAACrB,MAAR,KAAmB,CAAvB,EAA0B;AACxB3B,QAAAA,UAAU,CAAC,EAAD,CAAV;AACD,OAFD,MAEO;AACLA,QAAAA,UAAU,CAACgD,OAAD,CAAV;AACD;AACF,KAbD,MAaO,IAAI,CAACvB,gBAAGC,OAAH,CAAWxF,IAAX,CAAD,IAAqB,CAAC6G,KAAtB,IAA+B,CAACrF,WAApC,EAAiD;AACtDsC,MAAAA,UAAU,CAACyB,gBAAG4B,MAAH,CAAUnH,IAAV,EAAgB,OAAhB,CAAD,CAAV;AACD,KAFM,MAEA8D,UAAU,CAAC9D,IAAD,CAAV;AACR,GAlBD;;AAoBA,QAAMoH,UAAU,GAAIC,GAAD,IAA0B;AAC3C,QAAI,CAACrG,UAAL,EAAiB;AACf,UAAIf,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,QAAAA,QAAQ,CAACsF,gBAAGmB,MAAH,CAAU9G,KAAV,EAAiB+G,CAAC,IAAIA,CAAC,KAAKU,GAA5B,CAAD,CAAR;AACD;AACF;AACF,GAND;;AAQA,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAI,OAAO/F,aAAP,KAAyB,QAA7B,EACE,oBAAO,6BAAC,kBAAD;AAAW,MAAA,gBAAgB,EAAEA;AAA7B,MAAP,CADF,KAEK,oBAAO,4DAAGA,aAAH,CAAP;AACN,GAJD;;AAMA,QAAMgG,WAAW,GAAG,MAAM;AACxB,QAAI/E,WAAJ,EAAiB;AACf,aAAO,EAAP;AACD,KAFD,MAEO;AACL,aAAO1C,QAAQ,aAAMD,KAAN,SAAiBA,KAAhC;AACD;AACF,GAND;;AAQA,sBACE,6BAAC,0BAAD;AAAe,IAAA,KAAK,EAAEmC;AAAtB,kBACE,6BAAC,iBAAD,qBACE,6BAAC,uBAAD;AACE,IAAA,OAAO,EAAEgE,gBADX;AAEE,IAAA,QAAQ,EAAEjG,QAFZ;AAGE,IAAA,WAAW,EAAEY;AAHf,kBAKE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CAAC6G,gBAAOC,SAAR,EAAmBtF,kBAAnB,CADT;AAEE,IAAA,GAAG,EAAE4C,QAFP;AAGE,IAAA,QAAQ,EAAEqB,eAHZ;AAIE,IAAA,aAAa,EAAC;AAJhB,kBAME,6BAAC,2BAAD;AACE,IAAA,KAAK,EAAEmB,WAAW,EADpB;AAEE,IAAA,KAAK,EAAEhE,MAFT;AAGE,IAAA,KAAK,EAAE,CAACiE,gBAAOE,SAAR,EAAmBzF,cAAnB,CAHT;AAIE,IAAA,cAAc,EAAEG,cAJlB;AAKE,IAAA,qBAAqB,EAAEA,cALzB;AAME,IAAA,QAAQ,EAAE,KANZ;AAOE,IAAA,KAAK,EAAE2B,QAPT;AAQE,IAAA,QAAQ,EAAEhE,QARZ;AASE,IAAA,SAAS,EAAEmD,SATb;AAUE,IAAA,KAAK,EAAE,EACL,GAAGC,gBADE;AAELC,MAAAA,MAAM,EAAE;AACN9C,QAAAA,OAAO,EAAEF,YADH;AAENT,QAAAA,KAAK,EAAEkB;AAFD;AAFH,KAVT;AAiBE,IAAA,KAAK,eACH,6BAAC,2BAAD,CAAW,IAAX;AACE,MAAA,IAAI,EAAEiC,YADR;AAEE,MAAA,IAAI,EAAEC,gBAFR;AAGE,MAAA,KAAK,EAAEY;AAHT,MAlBJ;AAwBE,IAAA,IAAI,EAAElB;AAxBR,IANF,CALF,EAsCG3C,QAAQ,IAAIiE,QAAZ,gBACC,6BAAC,4BAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAE;AAAEX,MAAAA,MAAM,EAAE;AAAEzD,QAAAA,KAAK,EAAEkB;AAAT;AAAV,KAFT;AAGE,IAAA,OAAO,EAAEkD;AAHX,KAKGnD,UAAU,GAAGA,UAAH,aAAmBf,KAAnB,iBALb,CADD,GAQG,IA9CN,CADF,EAiDG,CAACgD,QAAD,iBACC,6BAAC,qBAAD;AACE,IAAA,IAAI,EAAEQ,aADR;AAEE,IAAA,KAAK,EAAEmE,gBAAOG,cAFhB;AAGE,IAAA,UAAU,MAHZ;AAIE,IAAA,YAAY,EAAE,MAAMC,IAAI,CAACC,MAAL,GAAcb,QAAd,EAJtB;AAKE,IAAA,UAAU,EAAE,CAAC;AAAEc,MAAAA;AAAF,KAAD,kBACV,6BAAC,iBAAD;AAAM,MAAA,KAAK,EAAEN,gBAAOO;AAApB,oBACE,6BAAC,sBAAD;AACE,MAAA,IAAI,EAAEnG,QADR;AAEE,MAAA,KAAK,EAAE,CACL4F,gBAAOQ,IADF,EAEL;AACEC,QAAAA,WAAW,EAAE7H,YADf;AAEE8H,QAAAA,eAAe,EACbtG,QAAQ,KAAK,MAAb,GAAsBxB,YAAtB,GAAqC;AAHzC,OAFK,EAOL8B,SAPK,CAFT;AAWE,MAAA,aAAa,EAAC,MAXhB;AAYE,MAAA,OAAO,EAAE,MAAMkF,UAAU,CAACU,IAAI,CAAClI,KAAN,CAZ3B;AAaE,MAAA,MAAM,EACJ6B,YAAY,iBACV,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAE+F,gBAAOW;AAApB,SACGL,IAAI,CAACM,eAAL,GACCN,IAAI,CAACM,eADN,gBAGC,6BAAC,wBAAD,CAAQ,KAAR;AACE,QAAA,IAAI,EAAE1G,UADR;AAEE,QAAA,KAAK,EAAE8F,gBAAOa,UAFhB;AAGE,QAAA,MAAM,EAAEP,IAAI,CAACQ,YAAL,IAAqB/I;AAH/B,QAJJ;AAfN,oBA6BE,6BAAC,sBAAD;AAAM,MAAA,KAAK,EAAEsC;AAAb,OAA6BiG,IAAI,CAACjI,KAAlC,CA7BF,CADF;AANJ,IAlDJ,eA4FE,6BAAC,yBAAD;AACE,IAAA,SAAS,EAAE4D,SADb;AAEE,IAAA,eAAe,EAAE8C,WAFnB;AAGE,IAAA,aAAa,EAAErG,QAAQ,GAAG,iBAAH,GAAuB,aAHhD;AAIE,IAAA,KAAK,EAAEsH,gBAAOe,UAJhB;AAKE,IAAA,WAAW,EAAEtH,WALf;AAME,IAAA,YAAY,EAAEC,YANhB;AAOE,IAAA,iBAAiB,EAAEE,iBAPrB;AAQE,IAAA,kBAAkB,EAAEC,kBARtB;AASE,IAAA,qBAAqB,EAAEF;AATzB,kBAWE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACL+G,MAAAA,eAAe,EAAE9E,MAAM,CAACoF,UADnB;AAELrD,MAAAA,KAAK,EAAE,CAACjF,QAAD,GAAY+D,WAAW,CAACI,MAAxB,GAAiC,MAFnC;AAGLoE,MAAAA,IAAI,EAAE,CAACvI,QAAD,GAAY+D,WAAW,CAACE,EAAxB,GAA6B,CAH9B;AAILuE,MAAAA,GAAG,EAAE,CAACxI,QAAD,GAAY+D,WAAW,CAACG,EAAxB,GAA6B,GAJ7B;AAKLuE,MAAAA,KAAK,EAAE,CALF;AAMLC,MAAAA,QAAQ,EAAE,UANL;AAOLC,MAAAA,OAAO,EAAE3I,QAAQ,GAAG,EAAH,GAAQ;AAPpB;AADT,kBAWE,6BAAC,yBAAD;AACE,IAAA,KAAK,EAAE,CACLsH,gBAAOsB,kBADF,EAELxH,sBAFK,EAGL;AAAEf,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAHK,EAILN,QAAQ,GAAG;AAAE6I,MAAAA,SAAS,EAAExE,SAAS,CAACI,EAAV,GAAe;AAA5B,KAAH,GAAqC,IAJxC;AADT,KAQG3D,UAAU,gBACT,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACwG,gBAAOwB,MAAR,EAAgB;AAAExI,MAAAA;AAAF,KAAhB;AAAb,kBACE,6BAAC,8BAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAEC;AAFT,IADF,CADS,GAOP,IAfN,eAgBE,6BAAC,iBAAD,QACG,CAACoC,QAAD,iBACC,6BAAC,qBAAD;AACE,IAAA,IAAI,EAAEQ,aADR;AAEE,IAAA,KAAK,EAAEmE,gBAAOG,cAFhB;AAGE,IAAA,UAAU,MAHZ;AAIE,IAAA,YAAY,EAAE,MAAMC,IAAI,CAACC,MAAL,GAAcb,QAAd,EAJtB;AAKE,IAAA,UAAU,EAAE,CAAC;AAAEc,MAAAA;AAAF,KAAD,kBACV,6BAAC,iBAAD;AAAM,MAAA,KAAK,EAAEN,gBAAOO;AAApB,oBACE,6BAAC,sBAAD;AACE,MAAA,IAAI,EAAEnG,QADR;AAEE,MAAA,KAAK,EAAE,CACL4F,gBAAOQ,IADF,EAEL;AACEC,QAAAA,WAAW,EAAE7H,YADf;AAEE8H,QAAAA,eAAe,EACbtG,QAAQ,KAAK,MAAb,GACIxB,YADJ,GAEI;AALR,OAFK,EASL8B,SATK,CAFT;AAaE,MAAA,aAAa,EAAC,MAbhB;AAcE,MAAA,MAAM,EACJT,YAAY,iBACV,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAE+F,gBAAOW;AAApB,SACGL,IAAI,CAACM,eAAL,GACCN,IAAI,CAACM,eADN,gBAGC,6BAAC,wBAAD,CAAQ,KAAR;AACE,QAAA,IAAI,EAAE1G,UADR;AAEE,QAAA,KAAK,EAAE8F,gBAAOa,UAFhB;AAGE,QAAA,MAAM,EAAEP,IAAI,CAACQ,YAAL,IAAqB/I;AAH/B,QAJJ,CAhBN;AA6BE,MAAA,OAAO,EAAE,MAAM6H,UAAU,CAACU,IAAI,CAAClI,KAAN;AA7B3B,oBA+BE,6BAAC,sBAAD;AAAM,MAAA,KAAK,EAAEiC;AAAb,OAA6BiG,IAAI,CAACjI,KAAlC,CA/BF,CADF,CANJ;AA0CE,IAAA,kBAAkB,eAAE,6BAAC,yBAAD,QAAUkC,kBAAV;AA1CtB,IAFJ,CAhBF,eAgEE,6BAAC,yBAAD;AAAS,IAAA,KAAK,EAAEyF,gBAAOyB;AAAvB,IAhEF,eAiEE,6BAAC,qBAAD;AACE,IAAA,GAAG,EAAEjE,OADP;AAEE,IAAA,IAAI,EAAEnB,OAFR;AAGE,IAAA,kBAAkB,EAAE,EAHtB;AAIE,IAAA,mBAAmB,EAAE,EAJvB;AAKE,IAAA,mBAAmB,MALrB;AAME,IAAA,aAAa,EAAE,CAAC7C,UANlB;AAOE,IAAA,mBAAmB,EACjBb,YAAY,gBACV,6BAAC,iBAAD,qBACE,6BAAC,2BAAD;AACE,MAAA,WAAW,EAAEO,iBADf;AAEE,MAAA,YAAY,EAAEkG,cAFhB;AAGE,MAAA,KAAK,EAAE/B,WAHT;AAIE,MAAA,KAAK,EAAE;AAAEzB,QAAAA,MAAM,EAAE;AAAE9C,UAAAA,OAAO,EAAEF;AAAX;AAAV,OAJT;AAKE,MAAA,KAAK,EAAE;AACLG,QAAAA,SAAS,EAAE,CADN;AAEL2H,QAAAA,eAAe,EAAElH,UAAU,GACvB,aADuB,GAEvBoC,MAAM,CAACoF,UAJN;AAKLpD,QAAAA,MAAM,EAAE8D;AALH;AALT,MADF,eAcE,6BAAC,yBAAD;AAAS,MAAA,KAAK,EAAE1B,gBAAOyB;AAAvB,MAdF,CADU,GAiBR,IAzBR;AA2BE,IAAA,mBAAmB,EAAE9I,YAAY,GAAG,CAAC,CAAD,CAAH,GAASgJ,SA3B5C;AA4BE,IAAA,UAAU,EAAE,CAAC;AAAErB,MAAAA;AAAF,KAAD,kBACV,6BAAC,wBAAD;AACE,MAAA,IAAI,EAAEA,IADR;AAEE,MAAA,QAAQ,EAAEtB,kBAFZ;AAGE,MAAA,QAAQ,EAAE5G,KAHZ;AAIE,MAAA,aAAa,EAAEQ,YAJjB;AAKE,MAAA,aAAa,EAAEU,aALjB;AAME,MAAA,kBAAkB,EAAEC,kBANtB;AAOE,MAAA,WAAW,EAAEJ,WAPf;AAQE,MAAA,QAAQ,EAAEK,UAAU,KAAI8G,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAE/H,QAAV,CARtB;AASE,MAAA,YAAY,EAAE0B,YAThB;AAUE,MAAA,UAAU,EAAEC,UAVd;AAWE,MAAA,oBAAoB,EAAEW,oBAXxB;AAYE,MAAA,qBAAqB,EAAEC,qBAZzB;AAaE,MAAA,qBAAqB,EAAEC,qBAbzB;AAcE,MAAA,qBAAqB,EAAEI,qBAdzB;AAeE,MAAA,qBAAqB,EAAEC,qBAfzB;AAgBE,MAAA,cAAc,EAAEI,cAhBlB;AAiBE,MAAA,kBAAkB,EAAEC;AAjBtB,MA7BJ;AAiDE,IAAA,YAAY,EAAE,MAAM2E,IAAI,CAACC,MAAL,GAAcb,QAAd,EAjDtB;AAkDE,IAAA,sBAAsB,EAAE,mBACtB,6BAAC,yBAAD;AAAS,MAAA,KAAK,EAAEQ,gBAAOyB;AAAvB,MAnDJ;AAqDE,IAAA,aAAa,EAAE,CAACG,EAAD,EAAKC,KAAL,MAAgB;AAC7B5D,MAAAA,MAAM,EAAEyD,qBADqB;AAE7BI,MAAAA,MAAM,EAAEJ,wBAAaG,KAFQ;AAG7BA,MAAAA;AAH6B,KAAhB,CArDjB;AA0DE,IAAA,kBAAkB,EAAE/B,iBAAiB;AA1DvC,IAjEF,CAXF,CAXF,CA5FF,CADF,CADF;AAuPD,CA9eD;;AAgfA7H,mBAAmB,CAAC8J,YAApB,GAAmCC,+BAAnC;eAEe/J,mB","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TextInput,\n  Surface,\n  Divider,\n  HelperText,\n  Searchbar,\n  Caption,\n  Chip,\n  Text,\n  Avatar,\n  Provider as PaperProvider,\n  useTheme,\n} from 'react-native-paper';\nimport {\n  View,\n  Dimensions,\n  Platform,\n  FlatList,\n  ActivityIndicator,\n  // ScrollView,\n} from 'react-native';\nimport Modal from 'react-native-modal';\nimport Lo from 'lodash';\n\nimport MultiselectItem from '../Components/MultiselectItem';\nimport {\n  colors as ConsColors,\n  defaultDropdownProps,\n  ITEMLAYOUT,\n} from '../constants';\nimport type { IDropdownData, IMultiselectDropdownProps } from '../types';\nimport styles from '../styles';\nimport { deviceWidth, deviceHeight } from '../util';\nimport EmptyList from '../Components/EmptyList';\nimport PressableTouch from '../Components/PressableTouch';\n\n// const theme = {\n//   ...DefaultTheme,\n//   roundness: 2,\n//   colors: {\n//     ...DefaultTheme.colors,\n//     colors: {\n//       primary: '#6200ee',\n//       accent: '#03dac4',\n//       background: '#f6f6f6',\n//       surface: '#FFFFFF',\n//       error: '#B00020',\n//       text: '#000000',\n//       onBackground: '#000000',\n//       onSurface: '#000000',\n//       placeholder: 'rgba(0,0,0,0.54)',\n//       disabled: 'rgba(0,0,0,0.26)',\n//     },\n//   },\n//   dark: true,\n// };\n\nconst defaultAvatar = require('../assets/ddicon.png');\n\nconst MultiselectDropdown: React.FC<IMultiselectDropdownProps> = props => {\n  const {\n    error,\n    value,\n    label,\n    required,\n    disabled,\n    data,\n    onChange,\n    floating,\n    enableSearch,\n    primaryColor = ConsColors.primary,\n    elevation,\n    borderRadius,\n    activityIndicatorColor,\n    searchPlaceholder,\n    rippleColor,\n    helperText,\n    errorColor,\n    itemTextStyle,\n    itemContainerStyle,\n    showLoader,\n    animationIn = 'fadeIn',\n    animationOut = 'fadeOut',\n    supportedOrientations = ['portrait', 'landscape'],\n    animationInTiming,\n    animationOutTiming,\n    parentDDContainerStyle,\n    emptyListText,\n    disableSort,\n    enableAvatar,\n    avatarSize,\n    defaultSortOrder = 'asc',\n    chipType = 'flat',\n    chipTextStyle = {},\n    onBlur,\n    emptySelectionText,\n    paperTheme,\n    textInputStyle,\n    chipStyle = {},\n    mainContainerStyle,\n    underlineColor,\n    disableSelectionTick,\n    selectedItemTextStyle,\n    selectedItemViewStyle,\n    removeLabel,\n    mode = 'flat',\n    selectedItemsText,\n    disabledItemTextStyle,\n    disabledItemViewStyle,\n    hideChip = false,\n    dropdownIcon = 'menu-down',\n    dropdownIconSize = 30,\n    itemSelectIcon,\n    itemSelectIconSize,\n    multiline = false,\n    searchInputTheme,\n  } = props;\n  const { colors } = useTheme();\n\n  const [selectedItems, setSelectedItems] = useState<IDropdownData[]>([]);\n  const [labelv, setLabelV] = useState<string>('');\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n  const [iconColor, setIconColor] = useState<string | undefined>('grey');\n  const [options, setOptions] = useState<IDropdownData[]>([]);\n  const [hasError, setError] = useState<boolean>(false);\n  const [contMeasure, setConMeasure] = useState({\n    vx: 0,\n    vy: 0,\n    vWidth: 0,\n    vHeight: 0,\n  });\n  const [dimension, setDimension] = useState({\n    dw: deviceWidth,\n    dh: deviceHeight,\n  });\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const pViewRef = useRef<View | any>();\n  const listRef = useRef<FlatList | any>();\n\n  useEffect(() => {\n    Dimensions.addEventListener('change', () => {\n      setIsVisible(false);\n      const { width, height } = Dimensions.get('window');\n      setDimension({ dw: width, dh: height });\n      setIconColor('grey');\n    });\n    return () => {\n      Dimensions.removeEventListener('change', () => {});\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!Lo.isEmpty(data) && value) {\n      setLabelV(`${value.length} ${selectedItemsText || 'selected'}`);\n      setSelectedItems(Lo.filter(data, d => value.includes(d.value)));\n    }\n  }, [value, data, selectedItemsText]);\n\n  useEffect(() => {\n    if (value) {\n      setLabelV(`${value.length} ${selectedItemsText || 'selected'}`);\n      setSelectedItems(Lo.filter(data, d => value.includes(d.value)));\n    }\n  }, [value, data, selectedItemsText]);\n\n  useEffect(() => {\n    if (disabled) {\n      setIconColor('lightgrey');\n    }\n  }, [disabled]);\n\n  useEffect(() => {\n    if (isVisible && listRef) {\n      listRef.current.flashScrollIndicators();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!disableSort)\n      setOptions(Lo.orderBy(data, ['label'], [defaultSortOrder]));\n    else setOptions(data);\n  }, [data, disableSort, defaultSortOrder]);\n\n  useEffect(() => {\n    if (required && error) {\n      setError(true);\n      setIconColor(errorColor);\n    } else {\n      setError(false);\n      setIconColor('grey');\n    }\n  }, [required, error, errorColor]);\n\n  const onTextInputFocus = () => {\n    if (hasError) {\n      setIconColor('red');\n    } else {\n      setIconColor(primaryColor);\n    }\n    pViewRef.current.measureInWindow(\n      (vx: number, vy: number, vWidth: number, vHeight: number) => {\n        const ddTop = vy + vHeight;\n        const bottomMetric = dimension.dh - vy;\n        if (bottomMetric < 300) {\n          setConMeasure({ vx, vy: ddTop - 217, vWidth, vHeight });\n        } else {\n          setConMeasure({\n            vx,\n            vy: ddTop,\n            vWidth,\n            vHeight,\n          });\n        }\n      }\n    );\n    setIsVisible(true);\n  };\n\n  const androidOnLayout = () => {\n    if (Platform.OS === 'android') {\n      pViewRef.current.measureInWindow(\n        (vx: number, vy: number, vWidth: number, vHeight: number) => {\n          const ddTop = vy + vHeight;\n          const bottomMetric = dimension.dh - vy;\n          if (bottomMetric < 300) {\n            setConMeasure({ vx, vy: ddTop - 217, vWidth, vHeight });\n          } else {\n            setConMeasure({ vx, vy: ddTop, vWidth, vHeight });\n          }\n        }\n      );\n    }\n  };\n\n  const onModalBlur = () => {\n    setIsVisible(false);\n    if (hasError) {\n      setIconColor('red');\n    } else {\n      setIconColor('grey');\n    }\n\n    if (onBlur && typeof onBlur === 'function') onBlur();\n  };\n\n  const handleOptionSelect = (v: string | number) => {\n    if (onChange && typeof onChange === 'function') {\n      if (value.includes(v)) {\n        onChange(Lo.remove(value, s => s !== v));\n      } else {\n        onChange([...value, v]);\n      }\n      if (hasError) {\n        setIconColor('red');\n      } else {\n        setIconColor('grey');\n      }\n    }\n    setSearchQuery('');\n    if (!disableSort)\n      setOptions(Lo.orderBy(data, ['label'], [defaultSortOrder]));\n    else setOptions(data);\n  };\n\n  const onChangeSearch = (query: string) => {\n    setSearchQuery(query);\n    if (!Lo.isEmpty(data) && query) {\n      const lFilter = data.filter(opt =>\n        opt.label\n          .toString()\n          .toLowerCase()\n          .trim()\n          .includes(query.toString().toLowerCase())\n      );\n      if (lFilter.length === 0) {\n        setOptions([]);\n      } else {\n        setOptions(lFilter);\n      }\n    } else if (!Lo.isEmpty(data) && !query && !disableSort) {\n      setOptions(Lo.sortBy(data, 'label'));\n    } else setOptions(data);\n  };\n\n  const removeChip = (rmV: string | number) => {\n    if (!showLoader) {\n      if (onChange && typeof onChange === 'function') {\n        onChange(Lo.remove(value, s => s !== rmV));\n      }\n    }\n  };\n\n  const getEmptyComponent = () => {\n    if (typeof emptyListText === 'string')\n      return <EmptyList emptyItemMessage={emptyListText} />;\n    else return <>{emptyListText}</>;\n  };\n\n  const labelAction = () => {\n    if (removeLabel) {\n      return '';\n    } else {\n      return required ? `${label}*` : label;\n    }\n  };\n\n  return (\n    <PaperProvider theme={paperTheme}>\n      <View>\n        <PressableTouch\n          onPress={onTextInputFocus}\n          disabled={disabled}\n          rippleColor={rippleColor}\n        >\n          <View\n            style={[styles.fullWidth, mainContainerStyle]}\n            ref={pViewRef}\n            onLayout={androidOnLayout}\n            pointerEvents=\"none\"\n          >\n            <TextInput\n              label={labelAction()}\n              value={labelv}\n              style={[styles.textInput, textInputStyle]}\n              underlineColor={underlineColor}\n              underlineColorAndroid={underlineColor}\n              editable={false}\n              error={hasError}\n              disabled={disabled}\n              multiline={multiline}\n              theme={{\n                ...searchInputTheme,\n                colors: {\n                  primary: primaryColor,\n                  error: errorColor,\n                },\n              }}\n              right={\n                <TextInput.Icon\n                  name={dropdownIcon}\n                  size={dropdownIconSize}\n                  color={iconColor}\n                />\n              }\n              mode={mode}\n            />\n          </View>\n          {required && hasError ? (\n            <HelperText\n              type=\"error\"\n              theme={{ colors: { error: errorColor } }}\n              visible={hasError}\n            >\n              {helperText ? helperText : `${label} is required`}\n            </HelperText>\n          ) : null}\n        </PressableTouch>\n        {!hideChip && (\n          <FlatList\n            data={selectedItems}\n            style={styles.chipScrollView}\n            horizontal\n            keyExtractor={() => Math.random().toString()}\n            renderItem={({ item }) => (\n              <View style={styles.chipWrapper}>\n                <Chip\n                  mode={chipType}\n                  style={[\n                    styles.chip,\n                    {\n                      borderColor: primaryColor,\n                      backgroundColor:\n                        chipType === 'flat' ? primaryColor : 'transparent',\n                    },\n                    chipStyle,\n                  ]}\n                  ellipsizeMode=\"tail\"\n                  onClose={() => removeChip(item.value)}\n                  avatar={\n                    enableAvatar && (\n                      <View style={styles.textView}>\n                        {item.avatarComponent ? (\n                          item.avatarComponent\n                        ) : (\n                          <Avatar.Image\n                            size={avatarSize}\n                            style={styles.avatarView}\n                            source={item.avatarSource || defaultAvatar}\n                          />\n                        )}\n                      </View>\n                    )\n                  }\n                >\n                  <Text style={chipTextStyle}>{item.label}</Text>\n                </Chip>\n              </View>\n            )}\n          />\n        )}\n        <Modal\n          isVisible={isVisible}\n          onBackdropPress={onModalBlur}\n          backdropColor={floating ? 'rgba(0,0,0,0.1)' : 'transparent'}\n          style={styles.modalStyle}\n          animationIn={animationIn}\n          animationOut={animationOut}\n          animationInTiming={animationInTiming}\n          animationOutTiming={animationOutTiming}\n          supportedOrientations={supportedOrientations}\n        >\n          <View\n            style={{\n              backgroundColor: colors.background,\n              width: !floating ? contMeasure.vWidth : 'auto',\n              left: !floating ? contMeasure.vx : 0,\n              top: !floating ? contMeasure.vy : 100,\n              right: 0,\n              position: 'absolute',\n              padding: floating ? 20 : 0,\n            }}\n          >\n            <Surface\n              style={[\n                styles.multiSelectSurface,\n                parentDDContainerStyle,\n                { elevation, borderRadius },\n                floating ? { maxHeight: dimension.dh / 2 } : null,\n              ]}\n            >\n              {showLoader ? (\n                <View style={[styles.loader, { borderRadius }]}>\n                  <ActivityIndicator\n                    size=\"small\"\n                    color={activityIndicatorColor}\n                  />\n                </View>\n              ) : null}\n              <View>\n                {!hideChip && (\n                  <FlatList\n                    data={selectedItems}\n                    style={styles.chipScrollView}\n                    horizontal\n                    keyExtractor={() => Math.random().toString()}\n                    renderItem={({ item }) => (\n                      <View style={styles.chipWrapper}>\n                        <Chip\n                          mode={chipType}\n                          style={[\n                            styles.chip,\n                            {\n                              borderColor: primaryColor,\n                              backgroundColor:\n                                chipType === 'flat'\n                                  ? primaryColor\n                                  : 'transparent',\n                            },\n                            chipStyle,\n                          ]}\n                          ellipsizeMode=\"tail\"\n                          avatar={\n                            enableAvatar && (\n                              <View style={styles.textView}>\n                                {item.avatarComponent ? (\n                                  item.avatarComponent\n                                ) : (\n                                  <Avatar.Image\n                                    size={avatarSize}\n                                    style={styles.avatarView}\n                                    source={item.avatarSource || defaultAvatar}\n                                  />\n                                )}\n                              </View>\n                            )\n                          }\n                          onClose={() => removeChip(item.value)}\n                        >\n                          <Text style={chipTextStyle}>{item.label}</Text>\n                        </Chip>\n                      </View>\n                    )}\n                    ListEmptyComponent={<Caption>{emptySelectionText}</Caption>}\n                  />\n                )}\n              </View>\n              <Divider style={styles.divider} />\n              <FlatList\n                ref={listRef}\n                data={options}\n                initialNumToRender={25}\n                maxToRenderPerBatch={25}\n                persistentScrollbar\n                scrollEnabled={!showLoader}\n                ListHeaderComponent={\n                  enableSearch ? (\n                    <View>\n                      <Searchbar\n                        placeholder={searchPlaceholder}\n                        onChangeText={onChangeSearch}\n                        value={searchQuery}\n                        theme={{ colors: { primary: primaryColor } }}\n                        style={{\n                          elevation: 0,\n                          backgroundColor: showLoader\n                            ? 'transparent'\n                            : colors.background,\n                          height: ITEMLAYOUT,\n                        }}\n                      />\n                      <Divider style={styles.divider} />\n                    </View>\n                  ) : null\n                }\n                stickyHeaderIndices={enableSearch ? [0] : undefined}\n                renderItem={({ item }) => (\n                  <MultiselectItem\n                    item={item}\n                    onSelect={handleOptionSelect}\n                    selected={value}\n                    selectedColor={primaryColor}\n                    itemTextStyle={itemTextStyle}\n                    itemContainerStyle={itemContainerStyle}\n                    rippleColor={rippleColor}\n                    disabled={showLoader || item?.disabled}\n                    enableAvatar={enableAvatar}\n                    avatarSize={avatarSize}\n                    disableSelectionTick={disableSelectionTick}\n                    selectedItemTextStyle={selectedItemTextStyle}\n                    selectedItemViewStyle={selectedItemViewStyle}\n                    disabledItemTextStyle={disabledItemTextStyle}\n                    disabledItemViewStyle={disabledItemViewStyle}\n                    itemSelectIcon={itemSelectIcon}\n                    itemSelectIconSize={itemSelectIconSize}\n                  />\n                )}\n                keyExtractor={() => Math.random().toString()}\n                ItemSeparatorComponent={() => (\n                  <Divider style={styles.divider} />\n                )}\n                getItemLayout={(_d, index) => ({\n                  length: ITEMLAYOUT,\n                  offset: ITEMLAYOUT * index,\n                  index,\n                })}\n                ListEmptyComponent={getEmptyComponent()}\n              />\n            </Surface>\n          </View>\n        </Modal>\n      </View>\n    </PaperProvider>\n  );\n};\n\nMultiselectDropdown.defaultProps = defaultDropdownProps;\n\nexport default MultiselectDropdown;\n"]}