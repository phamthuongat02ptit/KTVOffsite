"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativePaper = require("react-native-paper");

var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _PressableTouch = _interopRequireDefault(require("./PressableTouch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultProps = {
  selectedColor: _constants.colors.primary,
  itemTextStyle: {},
  itemContainerStyle: {},
  rippleColor: 'rgba(0,0,0,0.1)',
  enableAvatar: false,
  disabled: false
};

const styles = _reactNative.StyleSheet.create({
  selected: {
    paddingLeft: 5
  },
  listView: {
    flex: 1,
    paddingVertical: 10,
    height: _constants.ITEMLAYOUT,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  iconView: {
    width: 30
  },
  textView: {
    alignItems: 'center',
    flexDirection: 'row'
  },
  avatarView: {
    backgroundColor: 'transparent'
  },
  disabledText: {
    color: 'grey'
  },
  disabledItemView: {
    backgroundColor: 'transparent'
  }
});

const defaultAvatar = require('../assets/ddicon.png');

const Item = ({
  item,
  selected,
  onSelect,
  selectedColor,
  itemTextStyle,
  itemContainerStyle,
  rippleColor,
  disabled = true,
  enableAvatar,
  avatarSize,
  disableSelectionTick,
  selectedItemTextStyle,
  selectedItemViewStyle,
  disabledItemViewStyle = styles.disabledItemView,
  disabledItemTextStyle = styles.disabledText,
  itemSelectIcon = 'check',
  itemSelectIconSize = 18
}) => {
  const {
    label,
    value,
    avatarSource,
    avatarComponent
  } = item;
  const {
    colors
  } = (0, _reactNativePaper.useTheme)();

  const handleSelectValue = () => {
    onSelect(value);
  };

  const getSelectedStyles = () => {
    if (!_lodash.default.isEmpty(selectedItemTextStyle)) {
      return { ...styles.selected,
        color: selectedColor,
        ...selectedItemTextStyle
      };
    } else return styles.selected;
  };

  const renderIcon = () => {
    if (typeof itemSelectIcon === 'string') {
      return /*#__PURE__*/_react.default.createElement(_MaterialCommunityIcons.default, {
        name: itemSelectIcon,
        size: itemSelectIconSize,
        color: selectedColor
      });
    }

    return itemSelectIcon;
  };

  const inlineStyle = _reactNative.StyleSheet.create({
    unselected: {
      color: colors.text,
      paddingLeft: 5
    }
  });

  return /*#__PURE__*/_react.default.createElement(_PressableTouch.default, {
    onPress: handleSelectValue,
    disabled: disabled,
    key: Math.random().toString(),
    rippleColor: rippleColor
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.listView, itemContainerStyle, selected === value && selectedItemViewStyle, disabled && disabledItemViewStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.textView
  }, enableAvatar ? avatarComponent ? avatarComponent : /*#__PURE__*/_react.default.createElement(_reactNativePaper.Avatar.Image, {
    size: avatarSize,
    style: styles.avatarView,
    source: avatarSource || defaultAvatar
  }) : null, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [itemTextStyle, selected === value ? getSelectedStyles() : inlineStyle.unselected, disabled && disabledItemTextStyle]
  }, label)), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.iconView
  }, !disableSelectionTick && selected === value && renderIcon())));
};

Item.defaultProps = defaultProps;
var _default = Item;
exports.default = _default;
//# sourceMappingURL=Item.js.map