{"version":3,"sources":["MultiselectItem.tsx"],"names":["defaultProps","selectedColor","ConstColors","primary","itemTextStyle","itemContainerStyle","rippleColor","enableAvatar","styles","StyleSheet","create","selected","paddingLeft","listView","flex","paddingVertical","height","ITEMLAYOUT","flexDirection","justifyContent","alignItems","iconView","width","textView","avatarView","backgroundColor","disabledText","color","disabledItemView","defaultAvatar","require","MultiselectItem","item","onSelect","disabled","avatarSize","disableSelectionTick","selectedItemTextStyle","selectedItemViewStyle","disabledItemViewStyle","disabledItemTextStyle","itemSelectIcon","itemSelectIconSize","label","value","avatarSource","avatarComponent","colors","handleSelectValue","getSelectedStyles","Lo","isEmpty","renderIcon","inlineStyle","unselected","text","Math","random","toString","includes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Avatar, useTheme } from 'react-native-paper';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport Lo from 'lodash';\n\nimport { colors as ConstColors, ITEMLAYOUT } from '../constants';\nimport type { IMultiselectDropdownItemProps } from '../types';\nimport PressableTouch from './PressableTouch';\n\nconst defaultProps = {\n  selectedColor: ConstColors.primary,\n  itemTextStyle: {},\n  itemContainerStyle: {},\n  rippleColor: 'rgba(0,0,0,0.1)',\n  enableAvatar: false,\n};\nconst styles = StyleSheet.create({\n  selected: {\n    paddingLeft: 5,\n  },\n  listView: {\n    flex: 1,\n    paddingVertical: 10,\n    height: ITEMLAYOUT,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  iconView: {\n    width: 30,\n  },\n  textView: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  avatarView: {\n    backgroundColor: 'transparent',\n  },\n  disabledText: {\n    color: '#CFCFCF',\n  },\n  disabledItemView: {\n    backgroundColor: 'transparent',\n  },\n});\n\nconst defaultAvatar = require('../assets/ddicon.png');\n\nconst MultiselectItem: React.FC<IMultiselectDropdownItemProps> = ({\n  item,\n  selected,\n  onSelect,\n  selectedColor,\n  itemTextStyle,\n  itemContainerStyle,\n  rippleColor,\n  disabled,\n  enableAvatar,\n  avatarSize,\n  disableSelectionTick,\n  selectedItemTextStyle,\n  selectedItemViewStyle,\n  disabledItemViewStyle = styles.disabledItemView,\n  disabledItemTextStyle = styles.disabledText,\n  itemSelectIcon = 'check',\n  itemSelectIconSize = 18,\n}) => {\n  const { label, value, avatarSource, avatarComponent } = item;\n  const { colors } = useTheme();\n\n  const handleSelectValue = () => {\n    onSelect(value);\n  };\n\n  const getSelectedStyles = () => {\n    if (!Lo.isEmpty(selectedItemTextStyle)) {\n      return {\n        ...styles.selected,\n        color: selectedColor,\n        ...(selectedItemTextStyle as {}),\n      };\n    } else return styles.selected;\n  };\n\n  const renderIcon = () => {\n    if (typeof itemSelectIcon === 'string') {\n      return (\n        <MaterialCommunityIcons\n          name={itemSelectIcon}\n          size={itemSelectIconSize}\n          color={selectedColor}\n        />\n      );\n    }\n    return itemSelectIcon;\n  };\n\n  const inlineStyle = StyleSheet.create({\n    unselected: {\n      color: colors.text,\n      paddingLeft: 5,\n    },\n  });\n\n  return (\n    <PressableTouch\n      onPress={handleSelectValue}\n      disabled={disabled}\n      key={Math.random().toString()}\n      rippleColor={rippleColor}\n    >\n      <View\n        style={[\n          styles.listView,\n          itemContainerStyle,\n          selected.includes(value) ? selectedItemViewStyle : {},\n          disabled && disabledItemViewStyle,\n        ]}\n      >\n        <View style={styles.textView}>\n          {enableAvatar ? (\n            avatarComponent ? (\n              avatarComponent\n            ) : (\n              <Avatar.Image\n                size={avatarSize}\n                style={styles.avatarView}\n                source={avatarSource || defaultAvatar}\n              />\n            )\n          ) : null}\n          <Text\n            style={[\n              itemTextStyle,\n              selected.includes(value)\n                ? getSelectedStyles()\n                : inlineStyle.unselected,\n              disabled && disabledItemTextStyle,\n            ]}\n          >\n            {label}\n          </Text>\n        </View>\n        <View style={styles.iconView}>\n          {selected.includes(value) && !disableSelectionTick && renderIcon()}\n        </View>\n      </View>\n    </PressableTouch>\n  );\n};\n\nMultiselectItem.defaultProps = defaultProps;\n\nexport default MultiselectItem;\n"]}